name: CD - Deploy Backend

on:
  workflow_run:
    workflows: ["CI - Build and Test Application"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519_travelblog-back
          chmod 600 ~/.ssh/id_ed25519_travelblog-back
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_ed25519_travelblog-back -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful!'"

      - name: Clone or update project on server
        env:
          DEPLOY_BRANCH: main
        run: |
          ssh -i ~/.ssh/id_ed25519_travelblog-back -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            set -euo pipefail
          
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>/dev/null || true
            ssh-keyscan -H github.com | sed "s/github\.com/github-travelblog-back/" >> ~/.ssh/known_hosts 2>/dev/null || true
          
            REPO_DIR="/home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}"
            REPO_URL="git@${{ secrets.REPOSITORY_NAME }}"
            BRANCH="${DEPLOY_BRANCH:-main}"
          
            if [ -d "$REPO_DIR/.git" ]; then
              echo "Repo found. Forcing sync to origin/$BRANCH..."
              cd "$REPO_DIR"
              git remote set-url origin "$REPO_URL" || true
              git fetch origin --prune --tags
              git checkout -B "$BRANCH" "origin/$BRANCH"
              git reset --hard "origin/$BRANCH"
              git clean -fdx
            else
              echo "Cloning fresh..."
              rm -rf "$REPO_DIR"
              mkdir -p "$REPO_DIR"
              git clone --branch "$BRANCH" --depth 1 "$REPO_URL" "$REPO_DIR"
            fi
          
            echo "Now at commit: $(git -C "$REPO_DIR" rev-parse --short HEAD)"
          '

      - name: Generate .env file on server
        run: |
          ssh -i ~/.ssh/id_ed25519_travelblog-back -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          DB_VOLUME_PATH=\"/var/lib/docker/volumes/travel-blog-api_db-data/_data\"
          
          if [ -z \"\$(ls -A \$DB_VOLUME_PATH 2>/dev/null)\" ]; then
          echo 'ðŸ”„ Volume vide : DDL = create'
          DDL_VALUE=create
          else
          echo 'ðŸ“¦ Volume dÃ©jÃ  initialisÃ© : DDL = update'
          DDL_VALUE=update
          fi
          
          echo 'SPRING_PROFILES_ACTIVE=prod' > /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'DATABASE_USER=${{ secrets.DATABASE_USER }}' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'DATABASE_USER_PASSWORD=${{ secrets.DATABASE_USER_PASSWORD }}' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo \"SPRING_JPA_HIBERNATE_DDL_AUTO=\$DDL_VALUE\" >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'DATABASE_ROOT_PASSWORD=${{ secrets.DATABASE_ROOT_PASSWORD }}' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'CORS_ALLOWED_ORIGIN=https://travel-blog.cloud,https://www.travel-blog.cloud' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'JWT_EXP_TIME=${{ secrets.JWT_EXP_TIME }}' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'JWT_COOKIE_SECURE=true' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          echo 'JWT_COOKIE_SAMESIT=None' >> /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod &&
          chmod 600 /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }}/.env.prod
          "

      - name: Build Docker image and deploy
        run: |
          ssh -i ~/.ssh/id_ed25519_travelblog-back -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          cd /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }} &&
          docker compose down &&
          docker compose --env-file .env.prod pull &&
          docker compose --env-file .env.prod up -d
          "