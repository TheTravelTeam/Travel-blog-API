package com.wcs.travel_blog.media.model;

import com.wcs.travel_blog.article.model.Article;
import com.wcs.travel_blog.step.model.Step;
import com.wcs.travel_blog.travel_diary.model.TravelDiary;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

@Entity
@Getter
@Setter
public class Media {

    @Id
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Column(length = 1024, nullable = false)
    private String fileUrl;

    @Column(length = 255)
    private String publicId;

    //nullable = false : contrainte au niveau base de donnÃ©es (DDL).
    //â†’ GÃ©nÃ¨re une colonne NOT NULL dans ta table.
    //@NotNull (Bean Validation â€“ Jakarta Validation) : contrainte au niveau Java / validation.
    //â†’ Permet de lever une erreur avant mÃªme de parler Ã  la base
    // (exemple : quand tu reÃ§ois un DTO via un contrÃ´leur et que tu veux valider lâ€™entitÃ© avant persist).
    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(nullable = false, length = 20)
    private MediaType mediaType;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    private Boolean isVisible;

    //LAZY : Hibernate charge seulement lâ€™ID du TravelDiary au dÃ©but ; si tu veux accÃ©der Ã  media.getTravelDiary(),
    // Hibernate fera une requÃªte SQL supplÃ©mentaire Ã  ce moment-lÃ  (proxy).
    //ðŸ‘‰ Donc LAZY est meilleur pour Ã©viter de surcharger avec des requÃªtes inutiles quand tu nâ€™as pas besoin de lâ€™objet liÃ©.
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="travel_diary_id")
    private TravelDiary travelDiary;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "step_id")
    private Step step;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "article_id")
    private Article article;

}
